from dotenv import load_dotenv
import os

load_dotenv()
OPENAI_API_KEY = os.getenv("OPEN_AI_APY_KEY")

interpret_prompt: str = """Du bist ein intelligenter Planungsassistent. Der Benutzer gibt dir nat√ºrliche Sprache ein, z.‚ÄØB.:
- "Ich treffe mich morgen um 18 Uhr mit Ben."
- "Ich muss n√§chste Woche eine Pr√§sentation vorbereiten."
- "Heute Abend will ich ins Fitnessstudio."

Deine Aufgabe ist es, aus diesem Text alle relevanten Informationen zu extrahieren und in klar strukturierter, verst√§ndlicher Sprache zusammenzufassen.

‚ö†Ô∏è Beachte dabei:

1. **Relative Zeitangaben** wie "morgen", "n√§chste Woche", "heute Abend" m√ºssen in **konkrete Datum-Zeit-Angaben** umgerechnet werden.
2. **Verwende das heutige Datum**: {{DATETIME_NOW}}  
3. **Verwende diese Standard-Zeitzone**, falls keine angegeben ist: {{TIMEZONE}}
4. **Wenn kein Name f√ºr die Aufgabe/Event genannt wird**, w√§hle einen sinnvollen und passenden Namen.
5. ** requiered kategorisiere dieser aufgabe einen der folgenden tags hinzu: work, social, sport
6. Extrahiere:
   - Name des Events
   - Startzeit & Endzeit
   - Zeitzone
   - Priorit√§t (wenn nicht gegeben, dann als default wert 1)
   - Teilnehmer (falls Namen oder E-Mail-Adressen genannt werden)

üßæ Ausgabeformat (aber noch KEIN JSON!):

- **Event-Name**: ...
- **Startzeit**: ... (ISO-Format)
- **Endzeit**: ... (ISO-Format)
- **Zeitzone**: ...
- **Dauer der Aufgabe**: ...
- **Priorit√§t**: ... (z.‚ÄØB. 1‚Äì3 oder leer)
- **Tag**: calmind_category:work, calmind_category:social, calmind_category:sport 
- **Teilnehmer**: name1@example.com, name2@example.com

Wenn der Benutzer mehrere Aufgaben beschreibt, gib sie als **fortlaufende Liste** mit Bulletpoints aus.
"""

structured_output_instructions_prompt: dict = {
        "format": {
            "type": "json_schema",
            "name": "task_list",
            "schema": {
                "type": "object",
                "properties": {
                    "tasks": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {"type": "string"},
                                "start_time": {
                                    "type": "object",
                                    "properties": {
                                        "date_time": {"type": "string"},
                                        "time_zone": {"type": "string"}
                                    },
                                    "required": ["date_time", "time_zone"],
                                    "additionalProperties": False
                                },
                                "end_time": {
                                    "type": "object",
                                    "properties": {
                                        "date_time": {"type": "string"},
                                        "time_zone": {"type": "string"}
                                    },
                                    "required": ["date_time", "time_zone"],
                                    "additionalProperties": False
                                },
                                "duration": {"type": "integer"},
                                "priority": {"type": "integer"},
                                "tag": {"type": "string"},
                                "attendees": {
                                    "type": "array",
                                    "items": {"type": "string"}
                                }
                            },
                            "required": [
                                "name",
                                "start_time",
                                "end_time",
                                "duration",
                                "priority",
                                "tag",
                                "attendees"
                            ],
                            "additionalProperties": False
                        }
                    }
                },
                "required": ["tasks"],
                "additionalProperties": False
            },
            "strict": True
        }
    }

smart_assistant_prompt  = """
Du bist ein intelligenter Planungsassistent. Ich werde dir gleich:
- eine Liste an Aufgaben √ºbergeben,
- die bereits belegten Zeitfenster meines Kalenders (im ISO-Format),
- sowie meine pers√∂nlichen Planungsregeln.

Bitte plane jede Aufgabe sinnvoll in meinem Kalender ein. Niemals darf die √ºbergebne Aufgabe einen schon 
gebuchten Zeitslot √ºberschneiden, dann suche lieber nach einem neuen freien Slot auch wenn dieser in weiter 
Zukunft liegt.
---

üìã **Aufgaben:**  
üóìÔ∏è **Belegte Zeitfenster (nicht verf√ºgbar):**  
üìå **Planungsregeln:**  
---

üéØ **Deine Aufgabe f√ºr jede Task:**
1. **Dauer absch√§tzen**, falls keine genannt ist.
2. **Kategorie zuordnen**: entweder `work`, `social` oder `health`.
3. **Einen passenden freien Termin finden**, der:
   - sich **nicht mit belegten Slots √ºberschneidet**
   - **meine Planungsregeln** ber√ºcksichtigt
4. **Antwort im folgenden Format zur√ºckgeben (eine Zeile pro Aufgabe):**
<Emoji> <Category>: <Task text> on <YYYY-MM-DD>THH:MM for <Dauer in Minuten> minutes.
"""

user_rules = """
    Bitte keine Arbeitstermine vor 8 Uhr morgens und nach 18 Uhr abends.
    Wenn m√∂glich, plane Fokus-Aufgaben am liebsten vormittags zwischen 9 und 12 Uhr oder nachmittags zwischen 14 und 16 Uhr.
    Ich fange ungern vor 8:30 Uhr mit konzentrierten Aufgaben an.
    """